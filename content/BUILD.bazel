package(default_visibility = ["//visibility:public"])

load("@npm_bazel_typescript//:index.bzl", "ts_library")
load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_binary")

nodejs_binary(
    name = "server",
    data = [
        "//content/src:content",
        "@npm//@bazel/typescript",
        "@npm//typescript",
    ],
    entry_point = "//content/src:entrypoints/run-server.ts",
)

nodejs_binary(
    name = "db",
    data = [
        "//content/src:content",
        "@npm//@bazel/typescript",
        "@npm//typescript",
    ],
    entry_point = "//content/src:entrypoints/run-local-database.ts",
)

load("//tools/npm:package.bzl", "dataform_npm_package")

dataform_npm_package(
    name = "package",
    package_layers = [
        "//:common.package.json",
        "content.package.json",
    ],
    deps = [],
)

filegroup(
    name = "test_resources",
    srcs = glob(
        [
            "test/integration/**/*.txt",
            "test/integration/**/*.png",
        ],
    ),
)

ts_library(
    name = "tests_unit",
    testonly = 1,
    srcs = glob(["test/unit/**/*.ts"]),
    tsconfig = "//:tsconfig.json",
    deps = [
        "//commons/servers",
        "//commons/utils",
        "//content/src:content",
        "//content/test/helpers:tests_helpers",
        "@npm//@types/faker",
        "@npm//@types/jasmine",
        "@npm//@types/node",
        "@npm//@types/ms",
        "@npm//aws-sdk",
        "@npm//dcl-catalyst-commons",
        "@npm//dcl-crypto",
        "@npm//eth-crypto",
        "@npm//faker",
        "@npm//ms",
        "@npm//ts-mockito",
        "@npm//fp-future",
    ],
)

ts_library(
    name = "tests_integration",
    testonly = 1,
    srcs = glob(["test/integration/**/*.ts"]),
    tsconfig = "//:tsconfig.json",
    deps = [
        "//commons/servers",
        "//commons/utils",
        "//content/src:content",
        "//content/test/helpers:tests_helpers",
        "@npm//@types/faker",
        "@npm//@types/form-data",
        "@npm//@types/jasmine",
        "@npm//@types/ms",
        "@npm//@types/node",
        "@npm//@types/node-fetch",
        "@npm//dcl-catalyst-commons",
        "@npm//dcl-catalyst-client",
        "@npm//dcl-crypto",
        "@npm//eth-crypto",
        "@npm//faker",
        "@npm//form-data",
        "@npm//ms",
        "@npm//node-fetch",
        "@npm//testcontainers",
        "@npm//ts-mockito",
    ],
)

ts_library(
    name = "tests_manual",
    testonly = 1,
    srcs = glob(["test/manual/**/*.ts"]),
    tsconfig = "//:tsconfig.json",
    deps = [
        "//commons/servers",
        "//content/src:content",
        "//content/test/helpers:tests_helpers",
        "//contracts",
        "@npm//@types/faker",
        "@npm//@types/form-data",
        "@npm//@types/jasmine",
        "@npm//@types/ms",
        "@npm//@types/node",
        "@npm//@types/node-fetch",
        "@npm//dcl-crypto",
        "@npm//eth-crypto",
        "@npm//faker",
        "@npm//form-data",
        "@npm//ms",
        "@npm//node-fetch",
        "@npm//ts-mockito",
    ],
)

load("@npm_bazel_jasmine//:index.bzl", "jasmine_node_test")

jasmine_node_test(
    name = "unit_test",
    deps = [
        ":tests_unit",
        "@npm//jasmine",
    ],
)

jasmine_node_test(
    name = "integration_test",
    deps = [
        ":test_resources",
        ":tests_integration",
        "@npm//jasmine",
    ],
)

jasmine_node_test(
    name = "manual_test",
    deps = [
        ":test_resources",
        ":tests_manual",
        "@npm//jasmine",
    ],
)
