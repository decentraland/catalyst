version: 2.1

references:
  .workspace_root: &workspace_root /tmp/repo

  .attach_root: &attach_root
    attach_workspace:
      at: *workspace_root

  .image_client: &image_client
    image: cimg/node:16.14-browsers

  .working_directory_root: &working_directory_root
    working_directory: *workspace_root

  .base_env: &base_env
    docker:
      - <<: *image_client
    working_directory: *workspace_root

  .testing_branches: &testing_branches
    filters:
      branches:
        ignore: main
      tags:
        ignore: /(.*)/

  .all_branches_and_tags: &all_branches_and_tags
    filters:
      branches:
        only: /(.*)/
      tags:
        only: /^\d+\.\d+\.\d(.*)/ # semver

  .main_and_tags: &main_and_tags
    filters:
      branches:
        only: main
      tags:
        only: /^\d+\.\d+\.\d(.*)/ # semver

commands:
  login_dockerhub:
    steps:
      - run:
          name: Log into DockerHub
          command: docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
  build_docker_image:
    parameters:
      dockerfile:
        type: string
    steps:
      - setup_remote_docker: { docker_layer_caching: true, version: 20.10.2 }
      - run:
          name: Build Docker image
          command: |
            if echo "${CIRCLE_TAG}" | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
              DOCKER_BUILDKIT=1 docker build -t ${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1} --build-arg COMMIT_HASH=${CIRCLE_SHA1} --build-arg CATALYST_VERSION=${CIRCLE_TAG} -f <<parameters.dockerfile>> .
            else
              DOCKER_BUILDKIT=1 docker build -t ${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1} --build-arg COMMIT_HASH=${CIRCLE_SHA1} -f <<parameters.dockerfile>> .
            fi
  push_docker_image:
    steps:
      - run:
          name: Push image
          command: |
            docker push "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}"
            if echo "${CIRCLE_TAG}" | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
              docker tag "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}" "${DOCKER_IMAGE_NAME}:${CIRCLE_TAG}"
              docker push "${DOCKER_IMAGE_NAME}:${CIRCLE_TAG}"
              docker tag "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}" "${DOCKER_IMAGE_NAME}:latest"
              docker push "${DOCKER_IMAGE_NAME}:latest"
              # TODO: publish SNS message for stable channel
            fi

            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              docker tag "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}" "${DOCKER_IMAGE_NAME}:next"
              docker push "${DOCKER_IMAGE_NAME}:next"

              # TODO: publish SNS message for latest channel
            fi

jobs:
  checkout:
    <<: *base_env

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}

      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile --cache-folder ~/.cache/yarn

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .

  linter:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run: yarn lint:check

  build-content:
    docker:
      - <<: *image_client
      - image: cimg/postgres:12.9
        command: postgres -c max_connections=300
        environment:
          POSTGRES_DB: postgres_test
          POSTGRES_PASSWORD: '12345678'
          POSTGRES_USER: postgres
    parallelism: 5
    working_directory: *workspace_root
    steps:
      - <<: *attach_root
      - run:
          name: Run tests
          command: |
            cd content
            TESTFILES=$(circleci tests glob "test/**/*.spec.ts" | circleci tests split --split-by=timings)
            yarn test $TESTFILES --coverageDirectory=reports --reporters=jest-junit --reporters=default
            mv reports/coverage-final.json reports/coverage-${CIRCLE_NODE_INDEX:-0}.json
            mv api-coverage/api-coverage.json api-coverage/api-coverage-${CIRCLE_NODE_INDEX:-0}.json
          environment:
            CI: 'true'
            JEST_JUNIT_OUTPUT_DIR: './test-result'
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
      - store_test_results:
          path: content/test-result
      - store_artifacts:
          path: content/test-result
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - content/reports
            - content/api-coverage

  report-content-coverage:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Report coverage
          command: |
            cd content
            yarn nyc merge reports
            mkdir .nyc_output/
            mv coverage.json .nyc_output/coverage.json
            yarn nyc report --reporter=lcov --reporter=text
      - store_test_results:
          path: content/coverage
      - store_artifacts:
          path: content/coverage
  report-content-api-coverage:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Report API coverage
          command: |
            cd content
            yarn report-api-coverage
  build-lambdas:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Build content
          command: yarn workspace @catalyst/lambdas-server build
      - run:
          name: Run tests
          command: yarn workspace @catalyst/lambdas-server test

  publish-content-docker:
    <<: *base_env
    docker:
      - image: cimg/node:16.14-browsers
        environment: &ENVIRONMENT
          DOCKER_IMAGE_NAME: decentraland/catalyst-content
    steps:
      - <<: *attach_root
      - build_docker_image:
          dockerfile: "Dockerfile.content"
      - login_dockerhub
      - push_docker_image

  publish-lambdas-docker:
    <<: *base_env
    docker:
      - image: cimg/node:16.14-browsers
        environment: &ENVIRONMENT
          DOCKER_IMAGE_NAME: decentraland/catalyst-lambdas
    steps:
      - <<: *attach_root
      - build_docker_image:
          dockerfile: "Dockerfile.lambdas"
      - login_dockerhub
      - push_docker_image

  publish-content-docker-without-tag:
    <<: *base_env
    docker:
      - image: cimg/node:16.14-browsers
        environment: &ENVIRONMENT
          DOCKER_IMAGE_NAME: decentraland/catalyst-content
    steps:
      - <<: *attach_root
      - build_docker_image:
          dockerfile: "Dockerfile.content"
      - login_dockerhub
      - run:
          name: Push image (without tag)
          command: |
            docker push "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}"

  publish-lambdas-docker-without-tag:
    <<: *base_env
    docker:
      - image: cimg/node:16.14-browsers
        environment: &ENVIRONMENT
          DOCKER_IMAGE_NAME: decentraland/catalyst-lambdas
    steps:
      - <<: *attach_root
      - build_docker_image:
          dockerfile: "Dockerfile.lambdas"
      - login_dockerhub
      - run:
          name: Push image (without tag)
          command: |
            docker push "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}"

workflows:
  version: 2

  build-deploy:
    jobs:
      # checkout code
      - checkout:
          <<: *all_branches_and_tags

      - linter:
          <<: *all_branches_and_tags
          requires:
            - checkout

      # build packages
      - build-content:
          <<: *all_branches_and_tags
          requires:
            - checkout
      - report-content-coverage:
          <<: *all_branches_and_tags
          requires:
            - build-content
      - report-content-api-coverage:
          <<: *all_branches_and_tags
          requires:
            - build-content
      - build-lambdas:
          <<: *all_branches_and_tags
          requires:
            - checkout

      # publish docker images in "main" and semver tags
      # main publishes to @next
      # semver tags publish to @latest
      - publish-content-docker:
          <<: *main_and_tags
          requires:
            - build-content
            - report-content-coverage
            - report-content-api-coverage

      - publish-lambdas-docker:
          <<: *main_and_tags
          requires:
            - build-lambdas

      # NOT (main | semver) enables manual approval to release untagged docker images
      - accept-publish-docker-for-testing:
          <<: *testing_branches
          type: approval
          requires:
            - build-content
            - build-lambdas
      - publish-content-docker-without-tag:
          <<: *testing_branches
          requires:
            - accept-publish-docker-for-testing
      - publish-lambdas-docker-without-tag:
          <<: *testing_branches
          requires:
            - accept-publish-docker-for-testing
