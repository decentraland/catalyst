version: 2.0

references:
  .workspace_root: &workspace_root /tmp/repo

  .attach_root: &attach_root
    attach_workspace:
      at: *workspace_root

  .image_client: &image_client
    image: circleci/node:10-browsers

  .working_directory_root: &working_directory_root
    working_directory: *workspace_root

  .base_env: &base_env
    docker:
      - <<: *image_client
    working_directory: *workspace_root

  .all_branches_and_tags: &all_branches_and_tags
    filters:
      branches:
        only: /(.*)/
      tags:
        only: /^\d+\.\d+\.\d(.*)/ # semver

  .master_and_tags: &master_and_tags
    filters:
      branches:
        only: master
      tags:
        only: /^\d+\.\d+\.\d(.*)/ # semver

jobs:
  checkout:
    <<: *base_env

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .

  build-lighthouse:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Run tests
          command: npx bazel test //comms/lighthouse:unit_test --test_output=all

  build-peer:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Run tests
          command: npx bazel test //comms/peer:config_test --test_output=all

  build-content:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Run unit tests
          command: npx bazel test //content:unit_test --test_output=all
      - run:
          name: Run integration tests
          command: npx bazel test //content:integration_test --test_output=all

  build-lambdas:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Run tests
          command: npx bazel test //lambdas:unit_test --test_output=all

  publish-peer:
    <<: *base_env
    steps:
      - <<: *attach_root
      - run:
          name: Set up NPM access tokens
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Publish peer
          command: npx bazel run //comms/peer:package.publish

  publish-docker:
    <<: *base_env
    docker:
      - image: circleci/node:10-browsers
        environment: &ENVIRONMENT
          DOCKER_IMAGE_NAME: decentraland/katalyst
    steps:
      - <<: *attach_root
      - setup_remote_docker: { docker_layer_caching: true }  
      - run:
          name: Prepare to build Docker image
          command: ./prepare_for_docker_image.sh
      - run:
          name: Build Docker image
          command: docker build -t ${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1} .
      - run:
          name: Log into DockerHub
          command: docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
      - run:
          name: Push image
          command: |
            docker push "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}"
            if echo "${CIRCLE_TAG}" | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
              docker tag "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}" "${DOCKER_IMAGE_NAME}:${CIRCLE_TAG}"
              docker push "${DOCKER_IMAGE_NAME}:${CIRCLE_TAG}"
              docker tag "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}" "${DOCKER_IMAGE_NAME}:latest"
              docker push "${DOCKER_IMAGE_NAME}:latest"
            fi
  tag-latest-docker:
    <<: *base_env
    docker:
      - image: circleci/node:10-browsers
        environment: &ENVIRONMENT
          DOCKER_IMAGE_NAME: decentraland/katalyst
    steps:
      - <<: *attach_root
      - setup_remote_docker: { docker_layer_caching: true }  
      - run:
          name: Log into DockerHub
          command: docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
      - run:
          name: Tag image
          command: |
            docker tag "${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}" "${DOCKER_IMAGE_NAME}:latest"
            docker push "${DOCKER_IMAGE_NAME}:latest"

workflows:
  version: 2

  build-deploy:
    jobs:
      # checkout code
      - checkout:
          <<: *all_branches_and_tags

      # build packages
      - build-peer:
          <<: *all_branches_and_tags
          requires:
            - checkout
      - build-lighthouse:
          <<: *all_branches_and_tags
          requires:
            - checkout
      - build-content:
          <<: *all_branches_and_tags
          requires:
            - checkout
      - build-lambdas:
          <<: *all_branches_and_tags
          requires:
            - checkout

      # publish peer library
      - accept-publish-peer:
          <<: *master_and_tags
          type: approval
          requires:
            - build-peer
      - publish-peer:
          <<: *master_and_tags
          requires:
            - accept-publish-peer
      
      # publish docker image
      - accept-publish-docker:
          <<: *master_and_tags
          type: approval
          requires:
            - build-peer
            - build-lighthouse
            - build-content
            - build-lambdas
      - publish-docker:
          <<: *master_and_tags
          requires:
            - accept-publish-docker
      - accept-tag-latest-docker:
          <<: *master_and_tags
          type: approval
          requires:
            - publish-docker
      - tag-latest-docker:
          <<: *master_and_tags
          requires:
            - accept-tag-latest-docker
