load("@npm_bazel_typescript//:index.bzl", "ts_library")
load("//tools/npm:package.bzl", "dataform_npm_package")
load("@npm_bazel_karma//:index.bzl", "karma_web_test_suite")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@build_bazel_rules_nodejs//:defs.bzl", "npm_package")

package(default_visibility = ["//visibility:public"])

ts_library(
    name = "peer",
    srcs = glob(["src/**/*.ts"]),
    module_name = "decentraland-katalyst-peer",
    tsconfig = "//:tsconfig.json",
    deps = [
        "//comms/peer/proto:peer_proto_ts",
        "@npm//eventemitter3",
        "@npm//fp-future",
        "@npm//simple-peer",
        "@npm//google-protobuf",
    ],
)

dataform_npm_package(
    name = "dpackage",
    package_layers = [
        "//:common.package.json",
        "peer.package.json",
    ],
    deps = [":peer"],
)

rollup_bundle(
    name = "bundle",
    config_file = ":rollup.config.js",
    entry_point = "src/index.ts",
    format = "esm",
    output_dir = False,
    deps = [
        ":peer",
        "@npm//@wessberg/rollup-plugin-ts",
        "@npm//rollup-plugin-json",
    ],
)

npm_package(
    name = "package",
    deps = [
        ":bundle.js",
        ":dpackage_gen_package_json",
        ":peer",
    ],
)

ts_library(
    name = "tests",
    testonly = 1,
    srcs = glob(["test/**/*.ts"]),
    tsconfig = "//:tsconfig.json",
    deps = [
        ":peer",
        "@npm//@types/jasmine",
        "@npm//@types/sinon",
        "@npm//fp-future",
        "@npm//sinon",
    ],
)

karma_web_test_suite(
    name = "config_test",
    config_file = ":karma.conf.js",
    data = [
        ":tests",
    ],
    static_files = [
        "test/config.js",
        "@npm//simple-peer:simple-peer__files",
    ],
    tags = [],
    runtime_deps = [
    ],
    deps = [
        "test/config.js",
        ":tests",
        ":google_protobuf_requirejs",
        "@npm//eventemitter3:eventemitter3__umd",
        "@npm//fp-future:fp-future__umd",
        "@npm//karma-mocha-reporter",
        "@npm//karma-spec-reporter",
    ],
)

# Copy the google-protobuf library and convert it to a AMD module so it can be loaded in the
# RequireJS test environment.
genrule(
    name = "google_protobuf_requirejs",
    srcs = [
        "@npm//:node_modules/google-protobuf/google-protobuf.js",
    ],
    outs = [
        "google-protobuf.js",
    ],
    cmd = """echo "define('google-protobuf', function(require, exports, module) {" > $@ \
             && cat $< >> $@ \
             && echo '});' >> $@""",
)