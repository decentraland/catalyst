// source: comms/peer/proto/peer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import * as jspb from 'google-protobuf';
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.MessageData', null, global);
goog.exportSymbol('proto.Packet', null, global);
goog.exportSymbol('proto.Packet.DataCase', null, global);
goog.exportSymbol('proto.PacketType', null, global);
goog.exportSymbol('proto.PayloadEncoding', null, global);
goog.exportSymbol('proto.PingData', null, global);
goog.exportSymbol('proto.PongData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageData.repeatedFields_, null);
};
goog.inherits(proto.MessageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MessageData.displayName = 'proto.MessageData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PingData.displayName = 'proto.PingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PongData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PongData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PongData.displayName = 'proto.PongData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Packet.repeatedFields_, proto.Packet.oneofGroups_);
};
goog.inherits(proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Packet.displayName = 'proto.Packet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageData.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageData.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dstList: msg.getDstList_asB64(),
    payload: msg.getPayload_asB64(),
    encoding: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageData}
 */
proto.MessageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageData;
  return proto.MessageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageData}
 */
proto.MessageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDst(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {!proto.PayloadEncoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDstList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string room = 1;
 * @return {string}
 */
proto.MessageData.prototype.getRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MessageData.prototype.setRoom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes dst = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.MessageData.prototype.getDstList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes dst = 2;
 * This is a type-conversion wrapper around `getDstList()`
 * @return {!Array<string>}
 */
proto.MessageData.prototype.getDstList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDstList()));
};


/**
 * repeated bytes dst = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDstList()`
 * @return {!Array<!Uint8Array>}
 */
proto.MessageData.prototype.getDstList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDstList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.MessageData.prototype.setDstList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.MessageData.prototype.addDst = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.MessageData.prototype.clearDstList = function() {
  this.setDstList([]);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MessageData.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.MessageData.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.MessageData.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.MessageData.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional PayloadEncoding encoding = 4;
 * @return {!proto.PayloadEncoding}
 */
proto.MessageData.prototype.getEncoding = function() {
  return /** @type {!proto.PayloadEncoding} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.PayloadEncoding} value */
proto.MessageData.prototype.setEncoding = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PingData.prototype.toObject = function(opt_includeInstance) {
  return proto.PingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingData.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PingData}
 */
proto.PingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PingData;
  return proto.PingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PingData}
 */
proto.PingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPingid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 pingId = 1;
 * @return {number}
 */
proto.PingData.prototype.getPingid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PingData.prototype.setPingid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PongData.prototype.toObject = function(opt_includeInstance) {
  return proto.PongData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PongData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PongData.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PongData}
 */
proto.PongData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PongData;
  return proto.PongData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PongData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PongData}
 */
proto.PongData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PongData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PongData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PongData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PongData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPingid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 pingId = 1;
 * @return {number}
 */
proto.PongData.prototype.getPingid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PongData.prototype.setPingid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Packet.repeatedFields_ = [10];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Packet.oneofGroups_ = [[11,12,13]];

/**
 * @enum {number}
 */
proto.Packet.DataCase = {
  DATA_NOT_SET: 0,
  MESSAGEDATA: 11,
  PINGDATA: 12,
  PONGDATA: 13
};

/**
 * @return {proto.Packet.DataCase}
 */
proto.Packet.prototype.getDataCase = function() {
  return /** @type {proto.Packet.DataCase} */(jspb.Message.computeOneofCase(this, proto.Packet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instanceid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    src: jspb.Message.getFieldWithDefault(msg, 4, ""),
    subtype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    discardolderthan: jspb.Message.getFieldWithDefault(msg, 6, 0),
    optimistic: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    expiretime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    hops: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 9, 0),
    receivedbyList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    messagedata: (f = msg.getMessagedata()) && proto.MessageData.toObject(includeInstance, f),
    pingdata: (f = msg.getPingdata()) && proto.PingData.toObject(includeInstance, f),
    pongdata: (f = msg.getPongdata()) && proto.PongData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Packet;
  return proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscardolderthan(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptimistic(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiretime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHops(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addReceivedby(value);
      break;
    case 11:
      var value = new proto.MessageData;
      reader.readMessage(value,proto.MessageData.deserializeBinaryFromReader);
      msg.setMessagedata(value);
      break;
    case 12:
      var value = new proto.PingData;
      reader.readMessage(value,proto.PingData.deserializeBinaryFromReader);
      msg.setPingdata(value);
      break;
    case 13:
      var value = new proto.PongData;
      reader.readMessage(value,proto.PongData.deserializeBinaryFromReader);
      msg.setPongdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSubtype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDiscardolderthan();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOptimistic();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getExpiretime();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getHops();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getReceivedbyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getMessagedata();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.MessageData.serializeBinaryToWriter
    );
  }
  f = message.getPingdata();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.PingData.serializeBinaryToWriter
    );
  }
  f = message.getPongdata();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.PongData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 sequenceId = 1;
 * @return {number}
 */
proto.Packet.prototype.getSequenceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Packet.prototype.setSequenceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 instanceId = 2;
 * @return {number}
 */
proto.Packet.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Packet.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.Packet.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Packet.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string src = 4;
 * @return {string}
 */
proto.Packet.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Packet.prototype.setSrc = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string subtype = 5;
 * @return {string}
 */
proto.Packet.prototype.getSubtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Packet.prototype.setSubtype = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 discardOlderThan = 6;
 * @return {number}
 */
proto.Packet.prototype.getDiscardolderthan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Packet.prototype.setDiscardolderthan = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool optimistic = 14;
 * @return {boolean}
 */
proto.Packet.prototype.getOptimistic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.Packet.prototype.setOptimistic = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional int32 expireTime = 7;
 * @return {number}
 */
proto.Packet.prototype.getExpiretime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Packet.prototype.setExpiretime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 hops = 8;
 * @return {number}
 */
proto.Packet.prototype.getHops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Packet.prototype.setHops = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 ttl = 9;
 * @return {number}
 */
proto.Packet.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Packet.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated string receivedBy = 10;
 * @return {!Array<string>}
 */
proto.Packet.prototype.getReceivedbyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.Packet.prototype.setReceivedbyList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.Packet.prototype.addReceivedby = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Packet.prototype.clearReceivedbyList = function() {
  this.setReceivedbyList([]);
};


/**
 * optional MessageData messageData = 11;
 * @return {?proto.MessageData}
 */
proto.Packet.prototype.getMessagedata = function() {
  return /** @type{?proto.MessageData} */ (
    jspb.Message.getWrapperField(this, proto.MessageData, 11));
};


/** @param {?proto.MessageData|undefined} value */
proto.Packet.prototype.setMessagedata = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Packet.prototype.clearMessagedata = function() {
  this.setMessagedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasMessagedata = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PingData pingData = 12;
 * @return {?proto.PingData}
 */
proto.Packet.prototype.getPingdata = function() {
  return /** @type{?proto.PingData} */ (
    jspb.Message.getWrapperField(this, proto.PingData, 12));
};


/** @param {?proto.PingData|undefined} value */
proto.Packet.prototype.setPingdata = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Packet.prototype.clearPingdata = function() {
  this.setPingdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasPingdata = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PongData pongData = 13;
 * @return {?proto.PongData}
 */
proto.Packet.prototype.getPongdata = function() {
  return /** @type{?proto.PongData} */ (
    jspb.Message.getWrapperField(this, proto.PongData, 13));
};


/** @param {?proto.PongData|undefined} value */
proto.Packet.prototype.setPongdata = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.Packet.prototype.clearPongdata = function() {
  this.setPongdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasPongdata = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * @enum {number}
 */
proto.PacketType = {
  UKNOWN_PACKET_TYPE: 0,
  MESSAGE: 1,
  PING: 2,
  PONG: 3
};

/**
 * @enum {number}
 */
proto.PayloadEncoding = {
  BYTES: 0,
  STRING: 1,
  JSON: 2
};

export const { MessageData, Packet, PacketType, PayloadEncoding, PingData, PongData } = proto
